[{"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\index.js":"1","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\App.js":"2","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\serviceWorker.js":"3","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\Visualizer.jsx":"4","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\PathFindingVisualizer\\PathFindingVisualizer.jsx":"5","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\SortingVisualizer\\SortingVisualizer.jsx":"6","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\Algorithm\\pathfindingAlgorithms.js":"7","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\Algorithm\\sortingAlgorithms.js":"8","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\PathFindingVisualizer\\Node\\Node.jsx":"9","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\SortingVisualizer\\Pile\\Pile.jsx":"10","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\SortingVisualizer\\Pile\\Logger.js":"11"},{"size":240,"mtime":1680597006000,"results":"12","hashOfConfig":"13"},{"size":1385,"mtime":1680615784000,"results":"14","hashOfConfig":"13"},{"size":4951,"mtime":1680597006000,"results":"15","hashOfConfig":"13"},{"size":13157,"mtime":1680758112000,"results":"16","hashOfConfig":"13"},{"size":11890,"mtime":1680758464000,"results":"17","hashOfConfig":"13"},{"size":9537,"mtime":1680758836000,"results":"18","hashOfConfig":"13"},{"size":7512,"mtime":1680597006000,"results":"19","hashOfConfig":"13"},{"size":4393,"mtime":1680763868000,"results":"20","hashOfConfig":"13"},{"size":874,"mtime":1680597006000,"results":"21","hashOfConfig":"13"},{"size":2012,"mtime":1680757342000,"results":"22","hashOfConfig":"13"},{"size":1785,"mtime":1680629530000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1np9o2t",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\index.js",[],[],"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\App.js",[],[],"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\serviceWorker.js",[],[],"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\Visualizer.jsx",["62","63","64","65","66","67"],[],"import React, { Component } from 'react';\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './Visualizer.css';\nimport 'bootstrap'\n\nexport default class Visualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'main',\n            rendering: false,\n            algorithms: [],\n            currentAlgorithm: null,\n            goFunction: () => { },\n            resetFunction: () => { },\n            setAlgorithm: () => { },\n            sortingClicked: false,\n            pathClicked: false,\n        };\n        this.getFunctions = this.getFunctions.bind(this);\n        this.changeRenderingState = this.changeRenderingState.bind(this);\n    }\n\n    changeRenderingState(rendering) {\n        this.setState({ rendering: rendering });\n    }\n\n    getFunctions(go, reset, setAlgo, algorithms) {\n        this.state.goFunction = go;\n        this.state.resetFunction = reset;\n        this.state.setAlgorithm = setAlgo;\n        this.state.algorithms = algorithms;\n        this.setState({ algorithms: algorithms });\n    }\n\n    render() {\n        let renderObj = null;\n        if (this.state.mode === 'pathfinding') {\n            renderObj = <PathFindingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\n        }\n        else if (this.state.mode === 'sorting') {\n            renderObj = <SortingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\n        }\n        else {\n            renderObj =\n                <div class=\"welbotron\">\n\n                    <div class=\"container welc\">\n\n                        <h1 class='welcome'>Hello, Everyone.\n                            <p class=\"quote\">\n                                <p class=\"quoteText\">\"An algorithm must be seen to be believed.\"</p>\n                                <p class=\"quoteText\">\"Algorithms are central objects of study in Computer Science.\"</p>\n                                <p class=\"quoteText\">\"Algorithms are apprehensible magics.\"</p>\n                                <p class=\"quoteText\">\"An algorithm is like a recipe.\"</p>\n                                <p class=\"quoteText\">\"A picture speaks more than thousand  words\"</p>                                 \n                            </p>\n                            <br/>\n                            <p class=\"lead\">This tool can help beginners and even experienced programmers to visualize algorithms in a better manner.\n                            </p>\n                            <p class=\"secondline lead\">Click on one of the categories below to visualize algorithms.</p>\n\n                        </h1>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'pathfinding' });\n                                this.setState({ currentAlgorithm: null, pathClicked: true });\n                            }\n                        }} data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\">\n                            <span></span>\n                            PATH FINDING\n                        </a>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\n                            }\n                        }} data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\">\n                            <span></span>\n                            SORTING\n                        </a>\n                    </div>\n                </div>\n        }\n        let invisibleOrNot = '';\n        if (this.state.mode === 'main') invisibleOrNot = ' invisible';\n        let algorithms = this.state.algorithms;\n        return (\n            <>\n                <nav class=\"navbar navbar-expand-lg navbar-light fixed-top bg-dark\">\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'main' });\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        disabled={this.state.rendering}\n                    >Path and Sorting</button>\n\n                    {/* <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'pathfinding', currentAlgorithm: null, pathClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\"\n                        disabled={this.state.rendering}\n                    >Pathfinding</button>\n\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\"\n                        disabled={this.state.rendering}\n                    >Sorting</button> */}\n\n                    <div class={\"dropdown\" + invisibleOrNot}>\n                        <button class=\"btn btn-secondary dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\n                            {this.state.currentAlgorithm == null ? 'Algorithms' : this.state.currentAlgorithm}\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                {algorithms.map((algorithm, algoId) => {\n                                    return (<button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => {\n                                        this.state.setAlgorithm(algoId);\n                                        this.setState({ currentAlgorithm: this.state.algorithms[algoId] });\n                                    }}>{algorithm}</button>);\n                                }\n                                )\n                                }\n                            </li>\n                        </div>\n                    </div>\n\n                    <div class={\"dropdown\" + invisibleOrNot}>\n                        <button class=\"btn btn-light dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\n                            Actions\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.goFunction()} data-toggle={this.state.currentAlgorithm === null ? \"modal\" : \"\"} data-target=\"#setAlgoModal\">Go!</button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.resetFunction()}>Reset</button>\n                            </li>\n                        </div>\n                    </div>\n                </nav>\n\n                <div class=\"modal fade\" id=\"setAlgoModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">No Algorithm Selected</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body-alert\">\n                                <p>Please select an algorithm first.</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"pathIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Pathfinding</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>\n                                    Pathfinding is generally the process of finding a route between two points. It is closely related to the shortest path problem in graph theory,\n                                    which examines how to identify the \"best\" paths valued by different criteria (Ex. distance, cost, time consumption).\n                                </p>\n                                <p>Pathfinding is also similar to Searching in some circumstances. For instance, we can use [breadth-first search] to find the shortest path in a grid world.</p>\n                                <p>\n                                    In our scenario, the paths are valued by the number of cells they passed from START:\n                                    <div class=\"simg\" width=\"20\" height=\"20\"></div>\n                                    to the TARGET:\n                                    <div class=\"fimg\" width=\"20\" height=\"20\"></div>\n                                    .\n                                </p>\n                                <p>You may drag the START and TARGET icons to change their positions, and click on the blank nodes to add Walls.</p>\n\n                                <p>Now please choose a sorting algorithm and visualize it!</p>\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p><br />\n                                <p class='tips'>Note: there could be multiple \"best\" paths, so paths generated by different algorithms may not be consistent.</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"sortingIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Sorting</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>Sorting is a process of arranging an ordered sequence. It is a common operation in many applications.</p>\n                                <p>Common uses of sorted sequences are:\n                                    <div class='uses-list'>\n                                        <p>·lookup or search efficiently</p>\n                                        <p>·merge sequences efficiently</p>\n                                        <p>·process data in a defined order</p>\n                                    </div>\n                                    Now please choose a sorting algorithm and visualize it!\n                                </p>\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    \n                </div>\n\n                <div>\n                    {renderObj}\n                </div>\n            </>\n        )\n    }\n}\n","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\PathFindingVisualizer\\PathFindingVisualizer.jsx",["68","69","70","71","72","73"],[],"import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, BFS, DFS, AStar, getShortestPath, primMaze } from '../Algorithm/pathfindingAlgorithms';\nimport './PathFindingVisualizer.css';\n\nexport default class PathFindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            FR: 7,\n            FC: 31,\n            mouseIsPressed: false,\n            changingStart: false,\n            changingFinish: false,\n            visualized: false,\n            rendering: false,\n            numRow: 17,\n            numCol: 37,\n            SR: 7,\n            SC: 5,\n            speed: 'median',\n            delays: {'slow': 90, 'median': 30, 'fast': 10},\n            currentAlgorithm: -1,\n            descriptions: ['Breath-first Search Algortihm: is unweighted and guarantees the shortest path!', \n                           'Dijikstra Algorithm: is weighted and guarantees the shortest path!',\n                           'A* Search Algorithm: is weighted and guarantees the shortest path!',\n                           'Depth-first Search Algorithm: is unweighted and does not guarantee the shortest path!',\n                           ],\n            algorithms: ['BFS', 'Dijkstra', 'A Star', 'DFS'],\n            pathfindingAlgorithms: [BFS, dijkstra, AStar, DFS]\n        };\n        this.visualizePathfinding = this.visualizePathfinding.bind(this);\n        this.clearVisualizer = this.clearVisualizer.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(this.visualizePathfinding, this.clearVisualizer, this.setAlgorithm, this.state.algorithms);\n    }\n\n    setAlgorithm(algoId) {\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    isRendering() {\n        return this.state.rendering;\n    }\n\n    componentDidMount() {\n        const grid = this.initializeGrid(false);\n        this.setState({\n            grid: grid,\n            currentAlgorithm: -1\n        })\n        this.state.grid = grid;\n    }\n\n    initializeGrid(clearWall) {\n        const grid = [];\n        for (let row = 0; row < this.state.numRow; row++) {\n            const currentRow = [];\n            for (let col = 0; col < this.state.numCol; col++) {\n                let isW = false;\n                const element = document.getElementById(`node-${row}-${col}`);\n                if (element && (element.className === 'node node-path' || element.className === 'node node-visited')) {\n                    element.className = 'node';\n                }\n                if (!clearWall && element && element.className === 'node node-wall') {\n                    isW = true;\n                }\n                currentRow.push(this.createNode(row, col, isW));\n            }\n            grid.push(currentRow);\n        }\n        return grid;\n    }\n\n    createNode(row, col, isW) {\n        return {\n            col,\n            row,\n            isStart: row === this.state.SR && col === this.state.SC,\n            isFinish: row === this.state.FR && col === this.state.FC,\n            distance: Infinity,\n            heuristic: Infinity,\n            isVisited: false,\n            isWall: isW,\n            previousNode: null,\n        };\n    }\n\n    handleMouseDown(row, col) {\n        if (row === this.state.SR && col === this.state.SC) {\n            this.setState({ changingStart: true });\n        }\n        else if (row === this.state.FR && col === this.state.FC) {\n            this.setState({ changingFinish: true });\n        }\n        else if (!this.state.rendering) {\n            this.updateGridWithWall(this.state.grid, row, col);\n            this.setState({ mouseIsPressed: true });\n            this.clearVisitedAndPath();\n        }\n    }\n\n    handleMouseEnter(row, col) {\n        if (this.state.mouseIsPressed) {\n            this.updateGridWithWall(this.state.grid, row, col);\n            this.setState({ mouseIsPressed: true });\n        }\n\n        else if (this.state.changingStart && !(row === this.state.FR && col === this.state.FC)) {\n            const start = document.getElementById(`node-${this.state.SR}-${this.state.SC}`);\n            if (start) {\n                start.className = 'node';\n                start.isStart = false;\n                this.state.grid[this.state.SR][this.state.SC].isStart = false;\n            }\n            const newStart = document.getElementById(`node-${row}-${col}`);\n            if (newStart) {\n                newStart.isStart = true;\n                newStart.className = 'node node-start';\n                this.state.grid[row][col].isStart = true;\n            }\n            this.setState({ SR: row, SC: col });\n            this.clearVisitedAndPath();\n\n        }\n        else if (this.state.changingFinish && !(row === this.state.SR && col === this.state.SC)) {\n            const finish = document.getElementById(`node-${this.state.FR}-${this.state.FC}`);\n            if (finish) {\n                finish.className = 'node';\n                finish.isFinish = false;\n                this.state.grid[this.state.FR][this.state.FC].isFinish = false;\n            }\n            const newFinish = document.getElementById(`node-${row}-${col}`);\n            if (newFinish) {\n                newFinish.isFinish = true;\n                newFinish.className = 'node node-finish';\n                this.state.grid[row][col].isFinish = true;\n            }\n            this.setState({ FR: row, FC: col });\n            this.clearVisitedAndPath();\n        }\n\n    }\n\n    handleMouseUp() {\n        this.setState({\n            changingStart: false,\n            changingFinish: false,\n            mouseIsPressed: false\n        });\n    }\n\n    updateGridWithWall(grid, row, col) {\n        const node = grid[row][col];\n        const newNode = {\n            ...node,\n            isWall: !node.isWall\n        }\n        grid[row][col] = newNode;\n    }\n\n    visualizePathfinding() {\n        if (this.state.currentAlgorithm === -1) return;\n        if (this.state.rendering) return;\n\n        this.setState({ visualized: true, rendering: true });\n        this.props.setVisualizerRendering(true);\n        let g = this.initializeGrid(false);\n        this.setState({\n            grid: g\n        });\n        this.state.grid = g;\n        const grid = this.state.grid;\n        const start = grid[this.state.SR][this.state.SC];\n        const finish = grid[this.state.FR][this.state.FC];\n        const visitedInOrder = this.state.pathfindingAlgorithms[this.state.currentAlgorithm](grid, start, finish);\n        const shortedPath = getShortestPath(finish);\n        for (let i = 0; i < visitedInOrder.length; i++) {\n            setTimeout(() => {\n                const node = visitedInOrder[i];\n                if (!node.isStart && !node.isFinish)\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, this.state.delays[this.state.speed] * i);\n        }\n\n        for (let i = 0; i < shortedPath.length; i++) {\n            setTimeout(() => {\n                const node = shortedPath[i];\n                if (!node.isStart && !node.isFinish)\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\n            }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * i);\n\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false });\n            this.props.setVisualizerRendering(false);\n        }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * shortedPath.length);\n\n    }\n\n    clearVisualizer() {\n        if (!this.state.rendering)\n            this.setState({ grid: this.initializeGrid(true), visualized: false });\n\n    }\n\n    clearVisitedAndPath(){\n        for(let row = 0; row < this.state.numRow; row++){\n            for(let col = 0; col < this.state.numCol; col++){\n                let n = document.getElementById(`node-${row}-${col}`);\n                console.log(n);\n                if(n && (n.className === 'node node-visited' || n.className === 'node node-path')){\n                    n.className = 'node';\n                }\n            }\n        }\n    }\n\n    setSpeed(speed){\n        this.setState({speed: speed});\n    }\n\n    render() {\n\n        const grid = this.state.grid;\n\n        return (\n            <>\n                <div className=\"grid\">\n                    {grid.map((row, rowId) => {\n                        return (\n                            <div key={rowId}>\n                                {row.map((node, nodeId) => {\n                                    const { row, col, isFinish, isStart, isWall } = node;\n                                    return (\n                                        <Node\n                                            key={nodeId}\n                                            row={row}\n                                            col={col}\n                                            isStart={isStart}\n                                            isFinish={isFinish}\n                                            isWall={isWall}\n                                            mouseIsPressed={this.state.mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}\n                                        ></Node>\n                                    )\n                                })\n                                }\n                            </div>\n                        );\n                    })\n                    }\n                </div>\n                <div class={\"dropdown\"} style={{marginTop: \"10px\"}}>\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{marginRight:\"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\n                            </li>\n                        </div>\n                        <button\n                        onClick={() => { \n                            primMaze(this.state.grid);\n                            this.setState({ finish: false});\n                            this.clearVisitedAndPath();\n                        }}\n                        type=\"button\" class=\"btn btn-outline-dark\"\n                        style={{marginLeft: \"5px\", \"height\": \"30px\"}}\n                        disabled={this.state.rendering}>\n                        <p style={{ \"margin-top\": \"-6px\" }}>generate maze</p>\n                        \n                    </button>\n\n                    <h6 class='algoDescription'>{this.state.currentAlgorithm === -1 ? \"Welcome to Path Finding. Select an algorithm first.\" : this.state.descriptions[this.state.currentAlgorithm]}</h6>\n                    \n                </div>\n            </>\n        )\n    }\n}","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\SortingVisualizer\\SortingVisualizer.jsx",["74","75","76","77"],[],"import React, { Component } from 'react';\nimport './SortingVisualizer.css';\nimport Pile from './Pile/Pile';\nimport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort } from '../Algorithm/sortingAlgorithms';\n\nexport default class SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            piles: [],\n            numPiles: 30,\n            finished: false,\n            maxPile: 80,\n            changingPiles: [],\n            pileDelayTimes: [30, 40, 40, 80, 80],\n            DelayTimesSizeBased: {'fast': [60, 20, 20, 40, 40], 'median': [120, 40, 40, 80, 80], 'slow': [240, 80, 80, 160, 160]},\n            colorSetIndex: getRandomInt(0, 3),\n            currentAlgorithm: -1,\n            descriptions: ['Selection Sort: repeatedly find the minimum element from the unsorted part and append it to the sorted part.', \n                           'Bubble Sort: repeatedly swap the adjacent elements if they are in wrong order.',\n                           'Insertion Sort: repeatedly place value from the unsorted part at the correct position in the sorted part(by finding the closest left-side element that is smaller than it).',\n                           'Merge Sort: divide the array into two halves, sort them recursively using merge sort, and then merge the two halves.',\n                           'Quick Sort: choose an element as pivot, arrange the array such that the elements smaller than pivot are on its left and others are on its right, sort the two halves recursively.'],\n            unsortedPiles: [],\n            speed: \"median\",\n            size: \"median\",\n            algorithms: ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'],\n            sortingAlgorithms: [selectionSort, bubbleSort, insertionSort, mergeSort, quickSort]\n        };\n        this.randomizePiles = this.randomizePiles.bind(this);\n        this.visualizeSorting = this.visualizeSorting.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(this.visualizeSorting, this.randomizePiles, this.setAlgorithm, this.state.algorithms);\n    }\n\n    componentDidMount() {\n        const piles = this.initializePiles();\n        this.setState({\n            piles: piles,\n        });\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    setAlgorithm(algoId) {\n        if (this.state.unsortedPiles !== []) {\n            this.setState({ finished: false, changingPiles: [], piles: this.state.unsortedPiles, pivot: -1 });\n        }\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    initializePiles() {\n        let piles = [];\n        for (let i = 0; i < this.state.numPiles; i++) {\n            piles.push(i + 5);\n        }\n\n        for (let i = 0; i < this.state.numPiles; i++) {\n            let j = getRandomInt(0, i);\n            let temp = piles[i];\n            piles[i] = piles[j];\n            piles[j] = temp;\n        }\n        piles.push(this.state.numPiles + 5);\n        return piles;\n    }\n\n    visualizeSorting() {\n        if (this.state.currentAlgorithm === -1) {\n            return;\n        }\n        if (this.state.rendering) return;\n        if (this.state.finished) {\n            this.state.finished = false;\n            this.state.changingPiles = [];\n            this.state.piles = this.state.unsortedPiles;\n        }\n        this.setState({ rendering: true });\n        this.props.setVisualizerRendering(true);\n        const piles = this.state.piles.slice();\n\n        const statesInOrder = this.state.sortingAlgorithms[this.state.currentAlgorithm](piles);\n        for (let i = 0; i < statesInOrder.length; i++) {\n            const { piles: state, changing: changingPiles, pivot } = statesInOrder[i];\n            setTimeout(() => {\n                this.setState({ piles: state, changingPiles: changingPiles, pivot: pivot });\n            }, this.state.pileDelayTimes[this.state.currentAlgorithm] * i);\n\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false, finished: true });\n            this.props.setVisualizerRendering(false);\n        }, this.state.pileDelayTimes[this.state.currentAlgorithm] * statesInOrder.length);\n    }\n\n    randomizePiles() {\n        if (this.state.rendering) return;\n        this.setState({ finished: false, changingPiles: [], colorSetIndex: getRandomInt(0, 3) });\n        const piles = this.initializePiles();\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    setSpeed(speed) {\n        this.setState({ speed: speed, pileDelayTimes: this.state.DelayTimesSizeBased[speed] });\n    }\n\n    setSize(s) {\n        if(this.state.size === s) return;\n        let sizes = {\"small\": 20, \"median\": 30, \"large\": 40};\n        this.setState({ size: s, numPiles: sizes[s] });\n        this.state.numPiles = sizes[s];\n        const piles = this.initializePiles();\n        this.setState({ finished: false, changingPiles: [], piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    render() {\n        const piles = this.state.piles;\n        let nSquare = <p>Time Complexity: θ(n&#178;)</p>\n        let nLogn = <p>Time Complexity: θ(n·log(n))</p>\n        return (\n            <>\n\n                <div className='piles' class=\"container\">\n                    {\n\n                        piles.map((pile, pileId) => {\n                            return (\n                                <Pile\n                                    dummy={pileId === this.state.numPiles}\n                                    finished={this.state.finished}\n                                    className='pile'\n                                    key={pileId}\n                                    index={pileId}\n                                    val={pile}\n                                    size={this.state.size}\n                                    isChanging={this.state.changingPiles.indexOf(pileId) !== -1}\n                                    isPivot={this.state.pivot === pile}\n                                    colorSetIndex={this.state.colorSetIndex}\n                                ></Pile>\n                            )\n                        })\n\n                    }\n\n                </div>\n                \n                <div class=\"d-flex\" style={{marginLeft: \"37%\", marginTop: \"10px\"}}>\n                    <div class=\"dropdown 1\">\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSpeed\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginRight: \"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSpeed\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\n                            </li>\n                        </div>\n                    </div>\n                    <div class=\"dropdown 1\">\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSize\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginLeft: \"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Size: ${this.state.size}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSize\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('small')}><p style={{ \"margin-top\": \"-5px\" }}>{`small`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('large')}><p style={{ \"margin-top\": \"-5px\" }}>{`large`}</p></button>\n                            </li>\n                        </div>\n                    </div>\n                </div>\n                \n                <h6 class='algoDescription'>{this.state.currentAlgorithm === -1 ? \"Welcome to Sorting. Select an algorithm first.\" : this.state.descriptions[this.state.currentAlgorithm]}</h6>\n                <h5 class='algoComplexity' style={{marginTop: \"-4.5%\", color:\"rgb(90,90,90)\"}}>{\n                    this.state.currentAlgorithm === -1 ? \n                        \"\" : this.state.currentAlgorithm < 3 ?\n                            nSquare : nLogn\n                }</h5>\n            </>\n        );\n    }\n\n}\n\nfunction getRandomInt(min, range) {\n    return Math.floor(Math.random() * range) + min;\n}","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\Algorithm\\pathfindingAlgorithms.js",[],[],"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\Algorithm\\sortingAlgorithms.js",[],[],"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\PathFindingVisualizer\\Node\\Node.jsx",[],[],"E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\SortingVisualizer\\Pile\\Pile.jsx",["78","79","80"],[],"import React, { Component } from 'react';\nimport './Pile.css';\nimport Logger from './Logger';\n\nexport default class Pile extends Component {\n    render() {\n\n        const {\n            val,\n            isChanging,\n            isPivot,\n            finished,\n            index,\n            size,\n            colorSetIndex,\n            changingColors = [`rgb(228, 230, 120)`, `rgb(155, 147, 229)`, `rgb(248, 250, 140)`],\n            offSet = { 'small': 20, 'median': 0, 'large': 0 },\n            normalColors = [`rgb(200,${(1 - val / 45) * 255 + 50 + offSet[size]}, 255)`, `rgb(250,200, ${(1 - val / 80) * 255 + offSet[size]})`, `rgb( ${(1 - val / 80) * 255 + offSet[size]},200,250)`],\n        } = this.props;\n\n        let extraClassName = '';\n        if (isChanging) {\n            extraClassName = '-changing';\n        }\n        if (finished) {\n            extraClassName = '-finished';\n        }\n        let color = extraClassName === '-changing' ? changingColors[colorSetIndex] : normalColors[colorSetIndex];\n        if (!this.props.finished && this.props.isPivot) color = 'rgb(240, 190, 149)';\n        let lineOff = -20 * this.props.index;\n        let heights = { 'small': 14, 'median': 10, 'large': 8 };\n        let indicatorLength = { 'small': 420, 'median': 620, 'large': 820 };\n        return (\n            <>\n                <div\n                    className={'pile' + extraClassName}\n                    style={{ height: `${val * heights[this.props.size]}px`, background: color }}\n\n                >\n                    <p className='value'>{val}</p>\n                    {!this.props.finished && this.props.isPivot && <svg height=\"100\" width={indicatorLength[size] + 100} style={{ position: \"absolute\", display: \"flex\", marginTop: \"-31px\", marginLeft: `${lineOff}px` }}>\n                        <line x1=\"0\" y1=\"0\" x2={indicatorLength[size]} y2=\"0\" style={{ stroke: \"grey\", strokeWidth: \"3px\" }}></line>\n                    </svg>}\n                </div>\n            </>\n            \n\n        );\n    }\n\n}","E:\\sanskruti\\Path and Sorting Visualizer\\sans\\path-and-sort\\src\\SortingVisualizer\\Pile\\Logger.js",["81","82"],[],"import { Component } from \"react\";\r\nimport { selectionSort } from \"../../Algorithm/sortingAlgorithms\";\r\nimport Pile from \"./Pile\";\r\n\r\nexport default class Logger extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arr: []\r\n        }\r\n    }\r\n     swap(piles, a, b) {\r\n        const tempVal = piles[a];\r\n        piles[a] = piles[b];\r\n        piles[b] = tempVal;\r\n    }\r\n    selectionSort(piles) {\r\n\r\n        let statesInOrder = [];\r\n        for (let i = 0; i < piles.length - 1; i++) {\r\n            let minId = i;\r\n            console.log('Initializing minimum value as ', piles[i])\r\n            for (let j = i + 1; j < piles.length; j++) {\r\n                if (piles[j] < piles[minId]) {\r\n                    minId = j;\r\n                }\r\n                const temp = { piles: piles.slice(), changing: [j] };\r\n                statesInOrder.push(temp);\r\n\r\n            }\r\n            this.swap(piles, minId, i);\r\n            // console.log('swap', piles[minId], 'and', piles[i])\r\n            this.setState({\r\n                arr: [...this.state.arr,`swap ${piles[minId]} and ${piles[i]}` ],\r\n                \r\n            });\r\n            const temp = { piles: piles.slice(), changing: [minId, i] };\r\n            statesInOrder.push(temp);\r\n        }\r\n        console.log(\"The sorted array is:\", piles)\r\n        console.log(this.state.arr)\r\n        return statesInOrder;\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.selectionSort([1,4,5,2,9])\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                {this.state.arr.map(element =>(\r\n                    <div>\r\n                        {element}\r\n                    </div>\r\n                ))  }\r\n            </div>\r\n\r\n            )\r\n    }\r\n        \r\n    \r\n\r\n\r\n}",{"ruleId":"83","severity":1,"message":"84","line":30,"column":9,"nodeType":"85","messageId":"86","endLine":30,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":31,"column":9,"nodeType":"85","messageId":"86","endLine":31,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":32,"column":9,"nodeType":"85","messageId":"86","endLine":32,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":33,"column":9,"nodeType":"85","messageId":"86","endLine":33,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":65,"column":25,"nodeType":"89","endLine":70,"endColumn":110},{"ruleId":"87","severity":1,"message":"88","line":74,"column":25,"nodeType":"89","endLine":78,"endColumn":116},{"ruleId":"83","severity":1,"message":"84","line":53,"column":9,"nodeType":"85","messageId":"86","endLine":53,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":115,"column":17,"nodeType":"85","messageId":"86","endLine":115,"endColumn":62},{"ruleId":"83","severity":1,"message":"84","line":121,"column":17,"nodeType":"85","messageId":"86","endLine":121,"endColumn":42},{"ruleId":"83","severity":1,"message":"84","line":132,"column":17,"nodeType":"85","messageId":"86","endLine":132,"endColumn":62},{"ruleId":"83","severity":1,"message":"84","line":138,"column":17,"nodeType":"85","messageId":"86","endLine":138,"endColumn":42},{"ruleId":"83","severity":1,"message":"84","line":173,"column":9,"nodeType":"85","messageId":"86","endLine":173,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":73,"column":13,"nodeType":"85","messageId":"86","endLine":73,"endColumn":23},{"ruleId":"83","severity":1,"message":"84","line":74,"column":13,"nodeType":"85","messageId":"86","endLine":74,"endColumn":23},{"ruleId":"83","severity":1,"message":"84","line":75,"column":13,"nodeType":"85","messageId":"86","endLine":75,"endColumn":23},{"ruleId":"83","severity":1,"message":"84","line":110,"column":9,"nodeType":"85","messageId":"86","endLine":110,"endColumn":19},{"ruleId":"90","severity":1,"message":"91","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":14},{"ruleId":"90","severity":1,"message":"94","line":11,"column":13,"nodeType":"92","messageId":"93","endLine":11,"endColumn":20},{"ruleId":"90","severity":1,"message":"95","line":13,"column":13,"nodeType":"92","messageId":"93","endLine":13,"endColumn":18},{"ruleId":"90","severity":1,"message":"96","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":23},{"ruleId":"90","severity":1,"message":"97","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":12},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Logger' is defined but never used.","Identifier","unusedVar","'isPivot' is assigned a value but never used.","'index' is assigned a value but never used.","'selectionSort' is defined but never used.","'Pile' is defined but never used."]