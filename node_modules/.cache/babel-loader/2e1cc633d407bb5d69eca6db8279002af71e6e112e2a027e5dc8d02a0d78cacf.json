{"ast":null,"code":"function swap(piles, a, b) {\n  const tempVal = piles[a];\n  piles[a] = piles[b];\n  piles[b] = tempVal;\n}\nfunction selectionSort(piles) {\n  let statesInOrder = [];\n  for (let i = 0; i < piles.length - 1; i++) {\n    let minId = i;\n    console.log('Initializing minimum value as ', piles[i]);\n    for (let j = i + 1; j < piles.length; j++) {\n      if (piles[j] < piles[minId]) {\n        minId = j;\n      }\n      const temp = {\n        piles: piles.slice(),\n        changing: [j]\n      };\n      statesInOrder.push(temp);\n    }\n    swap(piles, minId, i);\n    console.log('swap', piles[minId], 'and', piles[i]);\n    const temp = {\n      piles: piles.slice(),\n      changing: [minId, i]\n    };\n    statesInOrder.push(temp);\n  }\n  console.log(\"The sorted array is:\", piles);\n  return statesInOrder;\n}\nfunction bubbleSort(piles) {\n  let statesInOrder = [];\n  let n = piles.length;\n  while (n > 1) {\n    let newN = 0;\n    for (let i = 1; i < n; i++) {\n      if (piles[i - 1] > piles[i]) {\n        swap(piles, i - 1, i);\n        console.log(\"swap\", i - 1, 'and', i);\n        newN = i;\n        const temp = {\n          piles: piles.slice(),\n          changing: [i]\n        };\n        statesInOrder.push(temp);\n      }\n    }\n    n = newN;\n  }\n  console.log(\"The array is sorted now.\");\n  return statesInOrder;\n}\nfunction insertionSort(piles) {\n  let statesInOrder = [];\n  for (let i = 1; i < piles.length; i++) {\n    const key = piles[i];\n    console.log('Insert', key);\n    for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\n      swap(piles, j, j - 1);\n      const temp = {\n        piles: piles.slice(),\n        changing: [j - 1]\n      };\n      statesInOrder.push(temp);\n    }\n  }\n  console.log('The sorted array is:', piles);\n  return statesInOrder;\n}\nfunction mergeSort(piles) {\n  let statesInOrder = [];\n  mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\n  return statesInOrder;\n}\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\n  if (start === end) return;\n  const mid = Math.floor((start + end) / 2);\n  mergeSortHelper(piles, start, mid, statesInOrder);\n  mergeSortHelper(piles, mid + 1, end, statesInOrder);\n  merge(piles, start, mid, end, statesInOrder);\n}\nfunction merge(piles, start, mid, end, statesInOrder) {\n  let k = start,\n    i = start,\n    j = mid + 1;\n  let pilesC = piles.slice();\n  while (i <= mid && j <= end) {\n    console.log('compare index ', i, 'and', j);\n    if (pilesC[i] <= pilesC[j]) {\n      piles[k++] = pilesC[i++];\n      console.log('writing smaller value to output');\n    } else {\n      piles[k++] = pilesC[j++];\n      console.log('copying index', i, ' to output');\n    }\n    const temp = {\n      piles: piles.slice(),\n      changing: [i, j, k]\n    };\n    statesInOrder.push(temp);\n  }\n  while (i <= mid) {\n    piles[k++] = pilesC[i++];\n    const temp = {\n      piles: piles.slice(),\n      changing: [i, k]\n    };\n    statesInOrder.push(temp);\n  }\n  while (j <= end) {\n    piles[k++] = pilesC[j++];\n    const temp = {\n      piles: piles.slice(),\n      changing: [j, k]\n    };\n    statesInOrder.push(temp);\n    console.log(\"The sorted array is:\", piles);\n  }\n}\nfunction quickSort(piles) {\n  let statesInOrder = [];\n  quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\n  return statesInOrder;\n}\nfunction quickSortHelper(piles, start, end, statesInOrder) {\n  if (start < end) {\n    let pivot = partition(piles, start, end, statesInOrder);\n    quickSortHelper(piles, start, pivot - 1, statesInOrder);\n    quickSortHelper(piles, pivot + 1, end, statesInOrder);\n  }\n}\nfunction partition(piles, start, end, statesInOrder) {\n  let pivot = piles[end];\n  let i = start - 1;\n  for (let j = start; j <= end - 1; j++) {\n    if (piles[j] < pivot) {\n      i++;\n      swap(piles, i, j);\n      const temp = {\n        piles: piles.slice(),\n        changing: [i, j],\n        pivot: pivot\n      };\n      if (pivot !== piles.length + 4) statesInOrder.push(temp);\n    }\n  }\n  swap(piles, i + 1, end);\n  const temp = {\n    piles: piles.slice(),\n    changing: [i + 1, end],\n    pivot: pivot\n  };\n  if (pivot !== piles.length + 4) statesInOrder.push(temp);\n  return i + 1;\n}\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };","map":{"version":3,"names":["swap","piles","a","b","tempVal","selectionSort","statesInOrder","i","length","minId","console","log","j","temp","slice","changing","push","bubbleSort","n","newN","insertionSort","key","mergeSort","mergeSortHelper","start","end","mid","Math","floor","merge","k","pilesC","quickSort","quickSortHelper","pivot","partition"],"sources":["E:/sanskruti/Path and Sorting Visualizer/sans/path-and-sort/src/Algorithm/sortingAlgorithms.js"],"sourcesContent":["function swap(piles, a, b) {\n    const tempVal = piles[a];\n    piles[a] = piles[b];\n    piles[b] = tempVal;\n}\n\n\n\nfunction selectionSort(piles) {\n\n    let statesInOrder = [];\n    for (let i = 0; i < piles.length - 1; i++) {\n        let minId = i;\n        console.log('Initializing minimum value as ', piles[i])\n        for (let j = i + 1; j < piles.length; j++) {\n            if (piles[j] < piles[minId]) {\n                minId = j;\n            }\n            const temp = { piles: piles.slice(), changing: [j] };\n            statesInOrder.push(temp);\n\n        }\n        swap(piles, minId, i);\n        console.log('swap', piles[minId],'and',piles[i])\n        const temp = { piles: piles.slice(), changing: [minId, i] };\n        statesInOrder.push(temp);\n    }\n    console.log(\"The sorted array is:\", piles)\n    return statesInOrder;\n    \n}\n\nfunction bubbleSort(piles) {\n    let statesInOrder = [];\n    let n = piles.length;\n    while (n > 1) {\n        let newN = 0;\n        for (let i = 1; i < n; i++) {\n            if (piles[i - 1] > piles[i]) {\n                swap(piles, i - 1, i);\n                console.log(\"swap\", i-1, 'and', i)\n                newN = i;\n                const temp = { piles: piles.slice(), changing: [i] };\n                statesInOrder.push(temp);\n            }\n        }\n        n = newN;\n    }\n    console.log(\"The array is sorted now.\")\n    return statesInOrder;\n}\n\nfunction insertionSort(piles) {\n    let statesInOrder = [];\n    for (let i = 1; i < piles.length; i++) {\n        const key = piles[i];\n        console.log('Insert', key)\n        for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\n            swap(piles, j, j - 1);\n            \n            const temp = { piles: piles.slice(), changing: [j - 1] };\n            statesInOrder.push(temp);\n        }\n    }\n    console.log('The sorted array is:', piles);\n    return statesInOrder;\n}\n\nfunction mergeSort(piles) {\n    let statesInOrder = [];\n    mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\n    if (start === end) return;\n    const mid = Math.floor((start + end) / 2);\n    mergeSortHelper(piles, start, mid, statesInOrder);\n    mergeSortHelper(piles, mid + 1, end, statesInOrder);\n    merge(piles, start, mid, end, statesInOrder);\n}\n\nfunction merge(piles, start, mid, end, statesInOrder) {\n    let k = start, i = start, j = mid + 1;\n    let pilesC = piles.slice();\n    while (i <= mid && j <= end) {\n        console.log('compare index ',i,'and',j )\n        if (pilesC[i] <= pilesC[j]) {\n            piles[k++] = pilesC[i++];\n            console.log('writing smaller value to output')\n        }\n        else {\n            piles[k++] = pilesC[j++];\n            console.log('copying index',i,' to output')\n        }\n        const temp = { piles: piles.slice(), changing: [i, j, k] };\n        statesInOrder.push(temp);\n\n    }\n    while (i <= mid) {\n        piles[k++] = pilesC[i++];\n        const temp = { piles: piles.slice(), changing: [i, k] };\n        statesInOrder.push(temp);\n    }\n    while (j <= end) {\n        piles[k++] = pilesC[j++];\n        const temp = { piles: piles.slice(), changing: [j, k] };\n        statesInOrder.push(temp);\n        console.log(\"The sorted array is:\", piles)\n    }\n}\n\n\nfunction quickSort(piles) {\n    let statesInOrder = [];\n    quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction quickSortHelper(piles, start, end, statesInOrder) {\n    if (start < end) {\n        let pivot = partition(piles, start, end, statesInOrder);\n        quickSortHelper(piles, start, pivot - 1, statesInOrder);\n        quickSortHelper(piles, pivot + 1, end, statesInOrder);\n    }\n}\n\nfunction partition(piles, start, end, statesInOrder) {\n    let pivot = piles[end];\n    let i = start - 1;\n    for (let j = start; j <= end - 1; j++) {\n        if (piles[j] < pivot) {\n            i++;\n            swap(piles, i, j);\n            const temp = { piles: piles.slice(), changing: [i, j], pivot: pivot};\n            if(pivot !== piles.length+4) statesInOrder.push(temp);\n        }\n    }\n    swap(piles, i + 1, end);\n    const temp = { piles: piles.slice(), changing: [i + 1, end], pivot: pivot};\n    if(pivot !== piles.length+4) statesInOrder.push(temp);\n    return i + 1;\n}\n\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}