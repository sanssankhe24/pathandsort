{"ast":null,"code":"function swap(piles,a,b){var tempVal=piles[a];piles[a]=piles[b];piles[b]=tempVal;}function selectionSort(piles){var statesInOrder=[];for(var i=0;i<piles.length-1;i++){var minId=i;console.log('Initializing minimum value as ',piles[i]);for(var j=i+1;j<piles.length;j++){if(piles[j]<piles[minId]){minId=j;}var _temp={piles:piles.slice(),changing:[j]};statesInOrder.push(_temp);}swap(piles,minId,i);console.log('swap',piles[minId],'and',piles[i]);var temp={piles:piles.slice(),changing:[minId,i]};statesInOrder.push(temp);}console.log(\"The sorted array is:\",piles);return statesInOrder;}function bubbleSort(piles){var statesInOrder=[];var n=piles.length;while(n>1){var newN=0;for(var i=1;i<n;i++){if(piles[i-1]>piles[i]){swap(piles,i-1,i);console.log(\"swap\",i-1,'and',i);newN=i;var temp={piles:piles.slice(),changing:[i]};statesInOrder.push(temp);}}n=newN;}console.log(\"The array is sorted now.\");return statesInOrder;}function insertionSort(piles){var statesInOrder=[];for(var i=1;i<piles.length;i++){var key=piles[i];console.log('Insert',key);for(var j=i;j>0&&piles[j-1]>piles[j];j--){swap(piles,j,j-1);var temp={piles:piles.slice(),changing:[j-1]};statesInOrder.push(temp);}}console.log('The sorted array is:',piles);return statesInOrder;}function mergeSort(piles){var statesInOrder=[];mergeSortHelper(piles,0,piles.length-1,statesInOrder);return statesInOrder;}function mergeSortHelper(piles,start,end,statesInOrder){if(start===end)return;var mid=Math.floor((start+end)/2);mergeSortHelper(piles,start,mid,statesInOrder);mergeSortHelper(piles,mid+1,end,statesInOrder);merge(piles,start,mid,end,statesInOrder);}function merge(piles,start,mid,end,statesInOrder){var k=start,i=start,j=mid+1;var pilesC=piles.slice();while(i<=mid&&j<=end){console.log('compare index ',i,'and',j);if(pilesC[i]<=pilesC[j]){piles[k++]=pilesC[i++];console.log('writing smaller value to output');}else{piles[k++]=pilesC[j++];console.log('copying index',i,' to output');}var temp={piles:piles.slice(),changing:[i,j,k]};statesInOrder.push(temp);}while(i<=mid){piles[k++]=pilesC[i++];var _temp2={piles:piles.slice(),changing:[i,k]};statesInOrder.push(_temp2);}while(j<=end){piles[k++]=pilesC[j++];var _temp3={piles:piles.slice(),changing:[j,k]};statesInOrder.push(_temp3);console.log(\"The sorted array is:\",piles);}}function quickSort(piles){var statesInOrder=[];quickSortHelper(piles,0,piles.length-1,statesInOrder);return statesInOrder;}function quickSortHelper(piles,start,end,statesInOrder){if(start<end){var pivot=partition(piles,start,end,statesInOrder);quickSortHelper(piles,start,pivot-1,statesInOrder);quickSortHelper(piles,pivot+1,end,statesInOrder);}}function partition(piles,start,end,statesInOrder){var pivot=piles[end];var i=start-1;for(var j=start;j<=end-1;j++){if(piles[j]<pivot){i++;swap(piles,i,j);var _temp4={piles:piles.slice(),changing:[i,j],pivot:pivot};if(pivot!==piles.length+4)statesInOrder.push(_temp4);}}swap(piles,i+1,end);var temp={piles:piles.slice(),changing:[i+1,end],pivot:pivot};if(pivot!==piles.length+4)statesInOrder.push(temp);return i+1;}export{selectionSort,bubbleSort,insertionSort,mergeSort,quickSort};","map":{"version":3,"names":["swap","piles","a","b","tempVal","selectionSort","statesInOrder","i","length","minId","console","log","j","temp","slice","changing","push","bubbleSort","n","newN","insertionSort","key","mergeSort","mergeSortHelper","start","end","mid","Math","floor","merge","k","pilesC","quickSort","quickSortHelper","pivot","partition"],"sources":["E:/sanskruti/Path and Sorting Visualizer/sans/path-and-sort/src/Algorithm/sortingAlgorithms.js"],"sourcesContent":["function swap(piles, a, b) {\n    const tempVal = piles[a];\n    piles[a] = piles[b];\n    piles[b] = tempVal;\n}\n\n\n\nfunction selectionSort(piles) {\n\n    let statesInOrder = [];\n    for (let i = 0; i < piles.length - 1; i++) {\n        let minId = i;\n        console.log('Initializing minimum value as ', piles[i])\n        for (let j = i + 1; j < piles.length; j++) {\n            if (piles[j] < piles[minId]) {\n                minId = j;\n            }\n            const temp = { piles: piles.slice(), changing: [j] };\n            statesInOrder.push(temp);\n\n        }\n        swap(piles, minId, i);\n        console.log('swap', piles[minId],'and',piles[i])\n        const temp = { piles: piles.slice(), changing: [minId, i] };\n        statesInOrder.push(temp);\n    }\n    console.log(\"The sorted array is:\", piles)\n    return statesInOrder;\n    \n}\n\nfunction bubbleSort(piles) {\n    let statesInOrder = [];\n    let n = piles.length;\n    while (n > 1) {\n        let newN = 0;\n        for (let i = 1; i < n; i++) {\n            if (piles[i - 1] > piles[i]) {\n                swap(piles, i - 1, i);\n                console.log(\"swap\", i-1, 'and', i)\n                newN = i;\n                const temp = { piles: piles.slice(), changing: [i] };\n                statesInOrder.push(temp);\n            }\n        }\n        n = newN;\n    }\n    console.log(\"The array is sorted now.\")\n    return statesInOrder;\n}\n\nfunction insertionSort(piles) {\n    let statesInOrder = [];\n    for (let i = 1; i < piles.length; i++) {\n        const key = piles[i];\n        console.log('Insert', key)\n        for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\n            swap(piles, j, j - 1);\n            \n            const temp = { piles: piles.slice(), changing: [j - 1] };\n            statesInOrder.push(temp);\n        }\n    }\n    console.log('The sorted array is:', piles);\n    return statesInOrder;\n}\n\nfunction mergeSort(piles) {\n    let statesInOrder = [];\n    mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\n    if (start === end) return;\n    const mid = Math.floor((start + end) / 2);\n    mergeSortHelper(piles, start, mid, statesInOrder);\n    mergeSortHelper(piles, mid + 1, end, statesInOrder);\n    merge(piles, start, mid, end, statesInOrder);\n}\n\nfunction merge(piles, start, mid, end, statesInOrder) {\n    let k = start, i = start, j = mid + 1;\n    let pilesC = piles.slice();\n    while (i <= mid && j <= end) {\n        console.log('compare index ',i,'and',j )\n        if (pilesC[i] <= pilesC[j]) {\n            piles[k++] = pilesC[i++];\n            console.log('writing smaller value to output')\n        }\n        else {\n            piles[k++] = pilesC[j++];\n            console.log('copying index',i,' to output')\n        }\n        const temp = { piles: piles.slice(), changing: [i, j, k] };\n        statesInOrder.push(temp);\n\n    }\n    while (i <= mid) {\n        piles[k++] = pilesC[i++];\n        const temp = { piles: piles.slice(), changing: [i, k] };\n        statesInOrder.push(temp);\n    }\n    while (j <= end) {\n        piles[k++] = pilesC[j++];\n        const temp = { piles: piles.slice(), changing: [j, k] };\n        statesInOrder.push(temp);\n        console.log(\"The sorted array is:\", piles)\n    }\n}\n\n\nfunction quickSort(piles) {\n    let statesInOrder = [];\n    quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction quickSortHelper(piles, start, end, statesInOrder) {\n    if (start < end) {\n        let pivot = partition(piles, start, end, statesInOrder);\n        quickSortHelper(piles, start, pivot - 1, statesInOrder);\n        quickSortHelper(piles, pivot + 1, end, statesInOrder);\n    }\n}\n\nfunction partition(piles, start, end, statesInOrder) {\n    let pivot = piles[end];\n    let i = start - 1;\n    for (let j = start; j <= end - 1; j++) {\n        if (piles[j] < pivot) {\n            i++;\n            swap(piles, i, j);\n            const temp = { piles: piles.slice(), changing: [i, j], pivot: pivot};\n            if(pivot !== piles.length+4) statesInOrder.push(temp);\n        }\n    }\n    swap(piles, i + 1, end);\n    const temp = { piles: piles.slice(), changing: [i + 1, end], pivot: pivot};\n    if(pivot !== piles.length+4) statesInOrder.push(temp);\n    return i + 1;\n}\n\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}